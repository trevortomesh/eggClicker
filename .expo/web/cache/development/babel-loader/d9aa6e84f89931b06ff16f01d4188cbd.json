{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nvar bgColor = 'white';\nvar txtColor = 'black';\n\nvar EggClicker = function EggClicker() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isEnabled = _useState6[0],\n      setIsEnabled = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      switchValue = _useState8[0],\n      setSwitchValue = _useState8[1];\n\n  var toggleSwitch = function toggleSwitch(value) {\n    setSwitchValue(value);\n  };\n\n  var checkPass = function checkPass(cheatText) {\n    if (cheatText == 'fuzznugget') {\n      setCount(count + 100);\n      setText('');\n    } else {\n      setText(cheatText);\n    }\n  };\n\n  var checkDarkMode = function checkDarkMode(switchMode) {\n    if (switchMode) {\n      bgColor = 'black';\n      txtColor = 'white';\n    } else {\n      bgColor = 'white';\n      txtColor = 'black';\n    }\n  };\n\n  return React.createElement(View, {\n    style: [styles.container, {\n      backgroundColor: bgColor\n    }]\n  }, React.createElement(Text, {\n    style: {\n      color: txtColor\n    }\n  }, switchValue ? 'Dark Mode' : 'Light Mode'), React.createElement(Switch, {\n    style: [{\n      marginTop: 30,\n      marginBottom: 30\n    }],\n    onValueChange: function onValueChange(s) {\n      checkDarkMode(s);\n      toggleSwitch(s);\n    },\n    value: switchValue\n  }), React.createElement(Text, {\n    style: [styles.baseText, {\n      color: txtColor\n    }]\n  }, \"You clicked the egg \", count, \" times!\", ' '), React.createElement(Pressable, {\n    onPress: function onPress() {\n      return setCount(count + 1);\n    }\n  }, React.createElement(Text, {\n    style: styles.eggButton\n  }, \"\\uD83E\\uDD5A\")), React.createElement(TextInput, {\n    style: ({\n      height: 40\n    }, {\n      color: txtColor\n    }),\n    placeholder: \"\",\n    value: text,\n    onChangeText: function onChangeText(newText) {\n      checkPass(newText);\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  eggButton: {\n    fontSize: 100,\n    textAlign: 'center',\n    marginVertical: 8\n  },\n  baseText: {\n    fontWeight: 'bold',\n    fontSize: 20\n  }\n});\nexport default EggClicker;","map":{"version":3,"sources":["/workspaces/eggClicker/App.js"],"names":["React","useState","bgColor","txtColor","EggClicker","count","setCount","text","setText","isEnabled","setIsEnabled","switchValue","setSwitchValue","toggleSwitch","value","checkPass","cheatText","checkDarkMode","switchMode","styles","container","backgroundColor","color","marginTop","marginBottom","s","baseText","eggButton","height","newText","StyleSheet","create","flex","justifyContent","alignItems","fontSize","textAlign","marginVertical","fontWeight"],"mappings":"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","sourcesContent":["/**\n *  file: App.js\n *  author: Trevor M. Tomesh <trevor.tomesh@uregina.ca>\n *  version: 0.1\n *  date-created: feb-2-2022 \n *  last-modified: feb-9-2022\n */\n\nimport React, { useState } from 'react';\nimport {\n  Text,\n  View,\n  Button,\n  StyleSheet,\n  Pressable,\n  TextInput,\n  Switch,\n} from 'react-native';\n\nvar bgColor = 'white';\nvar txtColor = 'black';\n\nconst EggClicker = () => {\n  const [count, setCount] = useState(0);\n  const [text, setText] = useState('');\n\n  const [isEnabled, setIsEnabled] = useState(false);\n  const [switchValue, setSwitchValue] = useState(false);\n  const toggleSwitch = (value) => {\n    setSwitchValue(value);\n  };\n\n  /**\n   * checkPass\n   * Purpose: This function checks to see if the password entered in the textInput\n   *          is the desired password\n   * Parameter(s):\n   *  <1> cheatText: string value to compare to \"fuzznugget\"\n   * \n   * Precondition(s): \n   * <1> count and setCount must be initialized and \n   * <2> count must be a number\n   * \n   * Returns: N/A\n   * \n   * Side effect:\n   * <1> Text wil change \n   * <2> if cheatText is 'fuzznugget' count will incrament by 100\n   */\n  const checkPass = (cheatText) => {\n    if (cheatText == 'fuzznugget') {\n      setCount(count + 100);\n      setText('');\n    }\n    else{\n      setText(cheatText);\n    }\n  };\n\n/**\n * checkDarkMode\n * Purpose: this function toggles the background colors between black / white \n *          and the font colors between black and white depending on whether or\n *          not the toggleSwitch is true.\n * \n * Parameter(s):\n *  <1> switchMode: a boolean that keeps track of the state of the switch\n * \n * Precondition(s):\n * <1> bgColor and txtColor are defined\n * <2> switchMode must be defined\n * \n * Returns: N/A\n * \n * Side effect:\n * <1> changes bgColor and txtColor\n *  \n */\n\n  const checkDarkMode = (switchMode) =>{\n    if (switchMode) {\n      bgColor = 'black';\n      txtColor = 'white';\n    } else {\n      bgColor = 'white';\n      txtColor = 'black';\n    }\n  }\n  \n  //checkDarkMode(switchValue);\n\n  return (\n    <View style={[styles.container, { backgroundColor: bgColor }]}>\n      <Text style={{ color: txtColor }}>\n        {switchValue ? 'Dark Mode' : 'Light Mode'}\n      </Text>\n      <Switch\n        style={[{ marginTop: 30, marginBottom: 30 }]}\n        onValueChange={(s) =>\n        {\n          checkDarkMode(s);\n          toggleSwitch(s);\n          }\n        }\n        value={switchValue}\n      />\n      <Text style={[styles.baseText, { color: txtColor }]}>\n        You clicked the egg {count} times!{' '}\n      </Text>\n\n      <Pressable onPress={() => setCount(count + 1)}>\n        <Text style={styles.eggButton}>ðŸ¥š</Text>\n      </Pressable>\n\n      {/**\n       * TextInput\n       * Purpose: Take a password from the user\n       * Prop(s):\n       * <1> style:\n       * <2> placeholder:\n       *  \n       */}\n      <TextInput\n        style={({ height: 40 }, { color: txtColor })}\n        placeholder=\"\"\n        value={text}\n        onChangeText={(newText) => \n        {\n          checkPass(newText);\n        }}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  eggButton: {\n    fontSize: 100,\n    textAlign: 'center',\n    marginVertical: 8,\n  },\n\n  baseText: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n});\n\nexport default EggClicker;\n"]},"metadata":{},"sourceType":"module"}